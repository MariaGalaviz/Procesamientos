import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class ReporteVentas {
    public static void main(String[] args) {
        String fileName = "sales.xml";
        File file = new File(fileName);

        if (!file.exists()) {
            System.out.println("El archivo '" + fileName + "' no existe.");
            return;
        }

        try {
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();

            ManejadorVentas manejador = new ManejadorVentas();
            saxParser.parse(file, manejador);

            manejador.mostrarReporte();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

class ManejadorVentas extends DefaultHandler {
    private Map<String, Double> ventasPorVendedor = new HashMap<>();
    private String currentElement = "";
    private String currentFirstName = "";
    private String currentLastName = "";
    private double currentSales = 0;
    private String currentState = "";
    private String currentDepartment = "";

    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
        currentElement = qName;
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        String valor = new String(ch, start, length).trim();
        switch (currentElement) {
            case "firstName":
                currentFirstName = valor;
                break;
            case "lastName":
                currentLastName = valor;
                break;
            case "sales":
                try {
                    currentSales = Double.parseDouble(valor);
                } catch (NumberFormatException e) {
                    System.err.println("Error: El valor '" + valor + "' no es un número válido para las ventas.");
                    currentSales = 0;
                }
                break;
            case "state":
                currentState = valor;
                break;
            case "department":
                currentDepartment = valor;
                break;
        }
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        if (qName.equals("venta")) {
            String key = currentFirstName + " " + currentLastName + " - " + currentDepartment;
            ventasPorVendedor.put(key, ventasPorVendedor.getOrDefault(key, 0.0) + currentSales);
            // Aquí podrías agregar lógica para manejar el estado si es necesario
        }
        currentElement = "";
    }

    public void mostrarReporte() {
        double totalVentas = 0;

        System.out.println("Reporte de Ventas por Vendedor y Departamento:");
        for (Map.Entry<String, Double> entry : ventasPorVendedor.entrySet()) {
            System.out.printf("Vendedor: %s, Ventas: %.2f%n", entry.getKey(), entry.getValue());
            totalVentas += entry.getValue();
        }
        System.out.printf("Ventas Totales: %.2f%n", totalVentas);
    }
}
